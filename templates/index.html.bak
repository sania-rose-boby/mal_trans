<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Malayalam Translator</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            min-height: 100vh;
            color: #2d3748;
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            color: #2d3748;
        }

        .header h1 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 8px;
            color: #1a202c;
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.8;
            color: #4a5568;
        }

        .main-card {
            background: white;
            border-radius: 16px;
            padding: 32px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            border: 1px solid #e2e8f0;
        }

        .tabs {
            display: flex;
            background: #f7fafc;
            border-radius: 12px;
            padding: 4px;
            margin-bottom: 32px;
            overflow-x: auto;
        }

        .tab {
            flex: 1;
            padding: 12px 20px;
            border: none;
            background: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
            white-space: nowrap;
            min-width: fit-content;
            color: #4a5568;
            font-size: 14px;
        }

        .tab.active {
            background: #3182ce;
            color: white;
        }

        .tab:hover:not(.active) {
            background: #edf2f7;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .form-group {
            margin-bottom: 24px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2d3748;
            font-size: 14px;
        }

        .form-control {
            width: 100%;
            padding: 12px 16px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.2s;
            background: #fff;
        }

        .form-control:focus {
            outline: none;
            border-color: #3182ce;
            box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.1);
        }

        textarea.form-control {
            min-height: 120px;
            resize: vertical;
            font-family: inherit;
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            text-decoration: none;
        }

        .btn-primary {
            background: #3182ce;
            color: white;
        }

        .btn-primary:hover {
            background: #2c5282;
        }

        .btn-secondary {
            background: #718096;
            color: white;
        }

        .btn-secondary:hover {
            background: #4a5568;
        }

        .btn-success {
            background: #38a169;
            color: white;
        }

        .btn-success:hover {
            background: #2f855a;
        }

        .btn-danger {
            background: #e53e3e;
            color: white;
        }

        .btn-danger:hover {
            background: #c53030;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-group {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            margin-top: 16px;
        }

        .results {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            margin-top: 32px;
        }

        .result-section {
            background: #f7fafc;
            border-radius: 12px;
            padding: 20px;
            border: 1px solid #e2e8f0;
        }

        .result-section h3 {
            margin-bottom: 16px;
            color: #2d3748;
            font-size: 16px;
            font-weight: 600;
        }

        .result-text {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 16px;
            min-height: 100px;
            white-space: pre-wrap;
            line-height: 1.6;
            font-size: 14px;
        }

        .highlight {
            background: #fbb6ce;
            padding: 2px 4px;
            border-radius: 4px;
        }

        .highlight.active {
            background: #e53e3e;
            color: white;
        }

        .record-controls {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 24px;
            padding: 40px 20px;
        }

        .record-btn {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            border: none;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .record-btn.start {
            background: #e53e3e;
            color: white;
        }

        .record-btn.stop {
            background: #718096;
            color: white;
        }

        .record-btn.recording {
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .record-status {
            font-size: 16px;
            color: #4a5568;
            text-align: center;
            font-weight: 500;
        }

        .file-drop-zone {
            border: 2px dashed #cbd5e0;
            border-radius: 12px;
            padding: 48px 32px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s;
            margin-bottom: 24px;
            background: #f7fafc;
        }

        .file-drop-zone:hover,
        .file-drop-zone.dragover {
            border-color: #3182ce;
            background: #edf2f7;
        }

        .file-drop-zone p {
            font-size: 16px;
            color: #4a5568;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .file-drop-zone .file-info {
            font-size: 14px;
            color: #718096;
        }

        .search-box {
            position: relative;
            margin-bottom: 20px;
        }

        .search-box input {
            padding-right: 40px;
        }

        .search-box .search-icon {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #718096;
            font-size: 16px;
        }

        .progress-container {
            margin: 20px 0;
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background: #e2e8f0;
            border-radius: 3px;
            overflow: hidden;
            cursor: pointer;
        }

        .progress-fill {
            height: 100%;
            background: #3182ce;
            border-radius: 3px;
            transition: width 0.3s ease;
            width: 0%;
        }

        .progress-text {
            text-align: center;
            margin-top: 8px;
            color: #4a5568;
            font-weight: 500;
            font-size: 14px;
        }

        .status-bar {
            background: #f7fafc;
            border-radius: 8px;
            padding: 12px 16px;
            margin-bottom: 24px;
            text-align: center;
            border: 1px solid #e2e8f0;
        }

        .status-connected {
            color: #38a169;
            font-weight: 600;
            font-size: 14px;
        }

        .status-error {
            color: #e53e3e;
            font-weight: 600;
            font-size: 14px;
        }

        .word-count {
            font-size: 12px;
            color: #718096;
            text-align: right;
            margin-top: 8px;
        }

        .loading {
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .spinner {
            width: 16px;
            height: 16px;
            border: 2px solid #e2e8f0;
            border-top: 2px solid #3182ce;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
            backdrop-filter: blur(5px);
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 16px;
            padding: 32px;
            max-width: 90vw;
            max-height: 80vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 20px 40px rgba(0,0,0,0.15);
        }

        .modal-close {
            position: absolute;
            top: 16px;
            right: 16px;
            background: #f7fafc;
            border: none;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            font-size: 16px;
            cursor: pointer;
            color: #4a5568;
            transition: all 0.2s;
        }

        .modal-close:hover {
            background: #e2e8f0;
        }

        .history-item {
            padding: 16px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-bottom: 12px;
            cursor: pointer;
            transition: all 0.2s;
            background: white;
        }

        .history-item:hover {
            background: #f7fafc;
            border-color: #3182ce;
        }

        .history-meta {
            font-size: 12px;
            color: #718096;
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .history-preview {
            color: #4a5568;
            line-height: 1.5;
            font-size: 14px;
        }

        .audio-controls {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-top: 16px;
            padding: 12px;
            background: #f7fafc;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }

        .play-btn {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            border: none;
            background: #3182ce;
            color: white;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
        }

        .play-btn:hover {
            background: #2c5282;
        }

        .time-display {
            font-size: 12px;
            color: #4a5568;
            font-weight: 500;
            min-width: 60px;
        }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 16px;
            }

            .main-card {
                padding: 24px;
                border-radius: 12px;
            }

            .header h1 {
                font-size: 2rem;
            }

            .tabs {
                flex-direction: column;
                gap: 2px;
            }

            .results {
                grid-template-columns: 1fr;
            }

            .btn-group {
                flex-direction: column;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }

            .modal-content {
                margin: 16px;
                max-width: calc(100vw - 32px);
                padding: 24px;
            }

            .record-btn {
                width: 70px;
                height: 70px;
                font-size: 20px;
            }

            .file-drop-zone {
                padding: 32px 20px;
            }
        }

        /* New styles for enhanced features */
        .search-container {
            position: relative;
            margin-bottom: 16px;
        }

        .search-input {
            width: 100%;
            padding: 12px 16px 12px 40px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 14px;
            background: #fff url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="%234a5568" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><path d="M21 21l-4.35-4.35"/></svg>') no-repeat 12px center;
        }

        .history-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
        }

        .history-modal-content {
            position: relative;
            background: white;
            width: 90%;
            max-width: 800px;
            margin: 40px auto;
            padding: 24px;
            border-radius: 16px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .history-item {
            padding: 16px;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-bottom: 12px;
            background: #f7fafc;
            cursor: pointer;
            transition: all 0.2s;
        }

        .history-item:hover {
            background: #edf2f7;
        }

        .history-item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 8px;
        }

        .history-item-timestamp {
            font-size: 12px;
            color: #718096;
        }

        .history-item-content {
            font-size: 14px;
            color: #2d3748;
            white-space: pre-wrap;
            max-height: 100px;
            overflow: hidden;
        }

        .file-upload-container {
            border: 2px dashed #d1d5db;
            border-radius: 12px;
            padding: 32px;
            text-align: center;
            background: #f7fafc;
            cursor: pointer;
            transition: all 0.2s;
        }

        .file-upload-container:hover {
            border-color: #3182ce;
            background: #edf2f7;
        }

        .file-upload-container.dragover {
            border-color: #3182ce;
            background: #ebf8ff;
        }

        .word-highlight {
            display: inline-block;
            padding: 2px 4px;
            border-radius: 4px;
            transition: all 0.2s;
        }

        .word-highlight.active {
            background: #3182ce;
            color: white;
        }

        .mobile-toggle {
            display: none;
            width: 100%;
            padding: 12px;
            margin-bottom: 16px;
            background: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            font-weight: 500;
            color: #4a5568;
        }

        @media (max-width: 768px) {
            .mobile-toggle {
                display: block;
            }

            .tabs {
                display: none;
            }

            .tabs.active {
                display: flex;
                flex-direction: column;
            }

            .tab {
                width: 100%;
                text-align: left;
            }

            .results {
                grid-template-columns: 1fr;
            }

            .btn-group {
                flex-direction: column;
            }

            .btn {
                width: 100%;
            }
        }

        .pdf-preview {
            margin-top: 16px;
            padding: 16px;
            background: #f7fafc;
            border-radius: 8px;
            border: 1px solid #e2e8f0;
        }

        .pdf-preview table {
            width: 100%;
            border-collapse: collapse;
        }

        .pdf-preview th, .pdf-preview td {
            padding: 12px;
            border: 1px solid #e2e8f0;
            text-align: left;
        }

        .pdf-preview th {
            background: #edf2f7;
            font-weight: 600;
        }

        .loading-spinner {
            display: none;
            width: 40px;
            height: 40px;
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3182ce;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 16px 24px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: none;
            z-index: 1000;
        }

        .notification.success {
            border-left: 4px solid #38a169;
        }

        .notification.error {
            border-left: 4px solid #e53e3e;
        }
    </style>
</head>
<body>
    <div class="container">
        <header class="header">
            <h1>Malayalam Translator</h1>
            <p>Real-time translation and transcription with advanced features</p>
        </header>

        <div class="main-card">
            <button class="mobile-toggle" id="mobileToggle">
                <i class="fas fa-bars"></i> Menu
            </button>

            <div class="tabs" id="tabs">
                <button class="tab active" data-tab="text">Text Translation</button>
                <button class="tab" data-tab="audio">Real-time Audio</button>
                <button class="tab" data-tab="file">File Upload</button>
                <button class="tab" data-tab="history">History</button>
            </div>

            <!-- Text Translation Tab -->
            <div class="tab-content active" id="textTab">
                <div class="search-container">
                    <input type="text" class="search-input" id="textSearch" placeholder="Search in English text...">
                </div>
                <div class="form-group">
                    <label for="englishText">English Text</label>
                    <textarea class="form-control" id="englishText" placeholder="Enter English text to translate..."></textarea>
                </div>
                <div class="btn-group">
                    <button class="btn btn-primary" id="translateBtn">
                        <i class="fas fa-language"></i> Translate
                    </button>
                    <button class="btn btn-success" id="summarizeBtn">
                        <i class="fas fa-compress-alt"></i> Summarize
                    </button>
                    <button class="btn btn-secondary" id="downloadPdfBtn" disabled>
                        <i class="fas fa-file-pdf"></i> Download PDF
                    </button>
                </div>
                <div class="results">
                    <div class="result-section">
                        <h3>English Text</h3>
                        <div class="result-text" id="englishResult"></div>
                    </div>
                    <div class="result-section">
                        <h3>Malayalam Translation</h3>
                        <div class="result-text" id="malayalamResult"></div>
                    </div>
                </div>
                <div class="pdf-preview" id="pdfPreview" style="display: none;">
                    <h4>PDF Preview</h4>
                    <table>
                        <tr>
                            <th>English</th>
                            <th>Malayalam</th>
                        </tr>
                        <tr>
                            <td id="previewEnglish"></td>
                            <td id="previewMalayalam"></td>
                        </tr>
                    </table>
                </div>
            </div>

            <!-- Real-time Audio Tab -->
            <div class="tab-content" id="audioTab">
                <div class="record-controls">
                    <button class="record-btn" id="recordBtn">
                        <i class="fas fa-microphone"></i>
                    </button>
                    <div class="btn-group">
                        <button class="btn btn-primary" id="startRecordingBtn">
                            <i class="fas fa-play"></i> Start Recording
                        </button>
                        <button class="btn btn-danger" id="stopRecordingBtn" disabled>
                            <i class="fas fa-stop"></i> Stop Recording
                        </button>
                    </div>
                </div>
                <div class="results">
                    <div class="result-section">
                        <h3>English Transcription</h3>
                        <div class="result-text" id="audioEnglishResult"></div>
                        <audio id="audioPlayer" controls style="width: 100%; margin-top: 16px;"></audio>
                    </div>
                    <div class="result-section">
                        <h3>Malayalam Translation</h3>
                        <div class="result-text" id="audioMalayalamResult"></div>
                    </div>
                </div>
            </div>

            <!-- File Upload Tab -->
            <div class="tab-content" id="fileTab">
                <div class="file-upload-container" id="fileDropZone">
                    <i class="fas fa-cloud-upload-alt fa-3x" style="color: #3182ce; margin-bottom: 16px;"></i>
                    <h3>Drag & Drop Files Here</h3>
                    <p>or</p>
                    <input type="file" id="fileInput" accept=".txt,.docx,.pdf" style="display: none;">
                    <button class="btn btn-primary" onclick="document.getElementById('fileInput').click()">
                        <i class="fas fa-folder-open"></i> Choose File
                    </button>
                    <p style="margin-top: 16px; font-size: 14px; color: #718096;">
                        Supported formats: .txt, .docx, .pdf
                    </p>
                </div>
                <div class="results" id="fileResults" style="display: none;">
                    <div class="result-section">
                        <h3>Extracted Text</h3>
                        <div class="result-text" id="extractedText"></div>
                    </div>
                    <div class="result-section">
                        <h3>Translation</h3>
                        <div class="result-text" id="fileTranslation"></div>
                    </div>
                </div>
            </div>

            <!-- History Tab -->
            <div class="tab-content" id="historyTab">
                <div class="search-container">
                    <input type="text" class="search-input" id="historySearch" placeholder="Search in history...">
                </div>
                <div id="historyList"></div>
            </div>
        </div>
    </div>

    <!-- History Modal -->
    <div class="history-modal" id="historyModal">
        <div class="history-modal-content">
            <button class="btn btn-secondary" style="position: absolute; right: 16px; top: 16px;" onclick="closeHistoryModal()">
                <i class="fas fa-times"></i>
            </button>
            <h3>Translation History</h3>
            <div id="historyModalContent"></div>
        </div>
    </div>

    <!-- Notification -->
    <div class="notification" id="notification"></div>

    <!-- Loading Spinner -->
    <div class="loading-spinner" id="loadingSpinner"></div>

    <script>
        // Global variables
        let socket = io();
        let isRecording = false;
        let mediaRecorder = null;
        let audioChunks = [];
        let currentSessionId = Date.now().toString();
        let currentAudioSegments = [];
        let currentAudioElement = null;
        let searchHighlights = [];
        let currentHistoryItem = null;
        let currentTranscriptData = {};
        let chunkProcessingQueue = [];
        let isProcessingChunks = false;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            initializeTabs();
            initializeSocketEvents();
            initializeEventListeners();
            loadHistory();
            updateWordCount();
        });

        // Tab System
        function initializeTabs() {
            const tabs = document.querySelectorAll('.tab');
            const tabContents = document.querySelectorAll('.tab-content');

            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const targetTab = tab.dataset.tab;
                    
                    // Remove active class from all tabs and contents
                    tabs.forEach(t => t.classList.remove('active'));
                    tabContents.forEach(tc => tc.classList.remove('active'));
                    
                    // Add active class to clicked tab and corresponding content
                    tab.classList.add('active');
                    document.getElementById(targetTab).classList.add('active');
                    
                    // Load history when history tab is opened
                    if (targetTab === 'history') {
                        loadHistory();
                    }
                });
            });
        }

        // Socket Events
        function initializeSocketEvents() {
            socket.on('connect', () => {
                updateConnectionStatus(true);
            });

            socket.on('disconnect', () => {
                updateConnectionStatus(false);
            });

            socket.on('transcription_result', (data) => {
                handleRealTimeTranscription(data);
            });

            socket.on('final_transcription_result', (data) => {
                handleFinalTranscription(data);
            });

            socket.on('error', (data) => {
                showError(data.message);
            });

            socket.on('recording_started', () => {
                updateRecordingUI(true);
            });
        }

        // Event Listeners
        function initializeEventListeners() {
            // Text translation
            document.getElementById('translateBtn').addEventListener('click', translateText);
            document.getElementById('summarizeBtn').addEventListener('click', () => summarizeText('inputText', 'summaryText', 'summaryResults'));
            document.getElementById('inputText').addEventListener('input', updateWordCount);
            document.getElementById('textSearch').addEventListener('input', (e) => searchInText(e.target.value, 'englishResult'));
            document.getElementById('downloadPdfBtn').addEventListener('click', downloadPDF);
            document.getElementById('copyTextBtn').addEventListener('click', copyToClipboard);

            // Audio recording
            document.getElementById('recordBtn').addEventListener('click', toggleRecording);
            document.getElementById('audioSearch').addEventListener('input', (e) => searchInText(e.target.value, 'audioEnglishResult'));
            document.getElementById('downloadAudioPdfBtn').addEventListener('click', downloadAudioPDF);
            document.getElementById('summarizeAudioBtn').addEventListener('click', () => summarizeText('audioEnglishResult', 'summaryText', 'summaryResults'));

            // Audio upload
            const audioDropZone = document.getElementById('audioDropZone');
            const audioFileInput = document.getElementById('audioFileInput');
            
            audioDropZone.addEventListener('click', () => audioFileInput.click());
            audioDropZone.addEventListener('dragover', handleDragOver);
            audioDropZone.addEventListener('drop', (e) => handleFileDrop(e, 'audio'));
            audioFileInput.addEventListener('change', handleAudioUpload);
            document.getElementById('downloadUploadedAudioPdfBtn').addEventListener('click', downloadUploadedAudioPDF);
            document.getElementById('summarizeUploadedAudioBtn').addEventListener('click', () => summarizeText('uploadedAudioEnglish', 'summaryText', 'summaryResults'));

            // File upload
            const fileDropZone = document.getElementById('fileDropZone');
            const fileInput = document.getElementById('fileInput');

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                fileDropZone.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                fileDropZone.addEventListener(eventName, highlight, false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                fileDropZone.addEventListener(eventName, unhighlight, false);
            });

            function highlight(e) {
                fileDropZone.classList.add('dragover');
            }

            function unhighlight(e) {
                fileDropZone.classList.remove('dragover');
            }

            fileDropZone.addEventListener('drop', handleDrop, false);
            fileInput.addEventListener('change', handleFileSelect, false);

            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                handleFiles(files);
            }

            function handleFileSelect(e) {
                const files = e.target.files;
                handleFiles(files);
            }

            function handleFiles(files) {
                if (files.length > 0) {
                    const file = files[0];
                    if (file.type === 'application/pdf' || 
                        file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' || 
                        file.type === 'text/plain') {
                        uploadFile(file);
                    } else {
                        showNotification('Unsupported file format', 'error');
                    }
                }
            }

            // PDF generation
            const downloadPdfBtn = document.getElementById('downloadPdfBtn');
            downloadPdfBtn.addEventListener('click', generatePDF);

            // History management
            loadHistory();
            const historySearch = document.getElementById('historySearch');
            historySearch.addEventListener('input', debounce(function(e) {
                const searchText = e.target.value.toLowerCase();
                filterHistory(searchText);
            }, 300));

            // Mobile menu toggle
            const mobileToggle = document.getElementById('mobileToggle');
            const tabs = document.getElementById('tabs');
            
            mobileToggle.addEventListener('click', () => {
                tabs.classList.toggle('active');
            });

            // Search functionality
            const textSearch = document.getElementById('textSearch');
            textSearch.addEventListener('input', debounce(function(e) {
                const searchText = e.target.value.toLowerCase();
                const englishResult = document.getElementById('englishResult');
                highlightSearch(englishResult, searchText);
            }, 300));
        }

        // Utility functions
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function highlightSearch(element, searchText) {
            if (!searchText) {
                element.innerHTML = element.textContent;
                return;
            }

            const text = element.textContent;
            const regex = new RegExp(`(${searchText})`, 'gi');
            element.innerHTML = text.replace(regex, '<span class="highlight">$1</span>');
        }

        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        function showLoading() {
            document.getElementById('loadingSpinner').style.display = 'block';
        }

        function hideLoading() {
            document.getElementById('loadingSpinner').style.display = 'none';
        }

        // Word highlighting during playback
        function highlightWord(timestamp) {
            const segments = window.currentSegments;
            if (!segments) return;

            const word = segments.find(segment => 
                segment.start <= timestamp && segment.end >= timestamp
            );

            if (word) {
                const englishResult = document.getElementById('audioEnglishResult');
                const words = englishResult.getElementsByClassName('word-highlight');
                Array.from(words).forEach(w => w.classList.remove('active'));
                const currentWord = englishResult.querySelector(`[data-start="${word.start}"]`);
                if (currentWord) {
                    currentWord.classList.add('active');
                    currentWord.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }
        }

        // History management
        function loadHistory() {
            fetch('/history')
                .then(response => response.json())
                .then(data => {
                    if (data.history) {
                        displayHistory(data.history);
                    }
                })
                .catch(error => {
                    console.error('Error loading history:', error);
                    showNotification('Error loading history', 'error');
                });
        }

        function displayHistory(history) {
            const historyList = document.getElementById('historyList');
            historyList.innerHTML = history.map(item => `
                <div class="history-item" onclick="showHistoryItem(${item.id})">
                    <div class="history-item-header">
                        <span class="history-item-type">${item.source_type}</span>
                        <span class="history-item-timestamp">${new Date(item.timestamp).toLocaleString()}</span>
                    </div>
                    <div class="history-item-content">${item.source_text}</div>
                </div>
            `).join('');
        }

        function showHistoryItem(id) {
            fetch(`/history/${id}`)
                .then(response => response.json())
                .then(data => {
                    const modalContent = document.getElementById('historyModalContent');
                    modalContent.innerHTML = `
                        <div class="results">
                            <div class="result-section">
                                <h3>Original Text</h3>
                                <div class="result-text">${data.source_text}</div>
                            </div>
                            <div class="result-section">
                                <h3>Translation</h3>
                                <div class="result-text">${data.translated_text}</div>
                            </div>
                        </div>
                        ${data.audio_filename ? `
                            <audio controls style="width: 100%; margin-top: 16px;">
                                <source src="/audio/${data.audio_filename}" type="audio/wav">
                            </audio>
                        ` : ''}
                    `;
                    document.getElementById('historyModal').style.display = 'block';
                })
                .catch(error => {
                    console.error('Error loading history item:', error);
                    showNotification('Error loading history item', 'error');
                });
        }

        function closeHistoryModal() {
            document.getElementById('historyModal').style.display = 'none';
        }

        function filterHistory(searchText) {
            const historyItems = document.getElementsByClassName('history-item');
            Array.from(historyItems).forEach(item => {
                const content = item.textContent.toLowerCase();
                item.style.display = content.includes(searchText) ? 'block' : 'none';
            });
        }

        // PDF generation
        function generatePDF() {
            const englishText = document.getElementById('englishResult').textContent;
            const malayalamText = document.getElementById('malayalamResult').textContent;

            if (!englishText || !malayalamText) {
                showNotification('No content to generate PDF', 'error');
                return;
            }

            showLoading();
            fetch('/generate_pdf', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    english: englishText,
                    malayalam: malayalamText,
                    title: 'Translation'
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.filename) {
                    window.location.href = `/download_pdf/${data.filename}`;
                    showNotification('PDF generated successfully');
                } else {
                    throw new Error(data.error || 'Failed to generate PDF');
                }
            })
            .catch(error => {
                console.error('Error generating PDF:', error);
                showNotification('Error generating PDF', 'error');
            })
            .finally(() => {
                hideLoading();
            });
        }

        // File upload handling
        function uploadFile(file) {
            const formData = new FormData();
            formData.append('document', file);

            showLoading();
            fetch('/upload_document', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.text) {
                    document.getElementById('extractedText').textContent = data.text;
                    document.getElementById('fileResults').style.display = 'grid';
                    // Automatically translate the extracted text
                    translateText(data.text, 'fileTranslation');
                } else {
                    throw new Error(data.error || 'Failed to extract text');
                }
            })
            .catch(error => {
                console.error('Error uploading file:', error);
                showNotification('Error uploading file', 'error');
            })
            .finally(() => {
                hideLoading();
            });
        }

        // Tab switching
        document.querySelectorAll('.tab').forEach(tab => {
            tab.addEventListener('click', () => {
                // Remove active class from all tabs and contents
                document.querySelectorAll('.tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked tab and corresponding content
                tab.classList.add('active');
                document.getElementById(`${tab.dataset.tab}Tab`).classList.add('active');
                
                // Hide mobile menu after selection
                document.getElementById('tabs').classList.remove('active');
            });
        });
    </script>
</body>
</html>